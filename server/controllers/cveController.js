const CVE = require("../models/cveModel");
exports.getPaginatedCves = async (req, res) => {
  try {
    res.json(res.paginatedResults);
  } catch (error) {
    console.error("Error fetching paginated CVE data:", error.message);
    res.status(500).json({ success: false, message: "Internal server error" });
  }
};

exports.getCveById = async (req, res) => {
  try {
    const { cveId } = req.params;
    console.log(cveId);
    const cve = await CVE.findOne({ id: cveId });
    if (!cve) {
      return res.status(404).json({ success: false, message: "CVE not found" });
    }
    res.json({ success: true, cve });
  } catch (error) {
    console.error("Error fetching CVE data by ID:", error.message);
    res.status(500).json({ success: false, message: "Internal server error" });
  }
};

exports.getCvesByYear = async (req, res) => {
  try {
    const { year } = req.params;

    if (!/^\d{4}$/.test(year)) {
      return res.status(400).json({
        success: false,
        message: "Invalid year format. Please provide a 4-digit year.",
      });
    }

    const startDate = new Date(`${year}-01-01T00:00:00.000Z`);
    const endDate = new Date(`${year}-12-31T23:59:59.999Z`);

    const cves = await CVE.find({
      publishedDate: { $gte: startDate, $lt: endDate },
    });

    res.json({ success: true, cves });
  } catch (error) {
    console.error("Error fetching CVE data by year:", error.message);
    res.status(500).json({ success: false, message: "Internal server error" });
  }
};

exports.getCvesByScore = async (req, res) => {
  try {
    const { score } = req.params;

    if (isNaN(score) || parseFloat(score) < 0 || parseFloat(score) > 10) {
      return res.status(400).json({
        success: false,
        message:
          "Invalid CVSS score. Please provide a valid score between 0 and 10.",
      });
    }

    const query = {
      "metrics.cvssV2.cvssData.baseScore": parseFloat(score),
    };

    const cves = await CVE.find(query);
    res.json({ success: true, cves });
  } catch (error) {
    console.error("Error fetching CVE data by score:", error.message);
    res.status(500).json({ success: false, message: "Internal server error" });
  }
};

exports.getCvesModifiedInLastNDays = async (req, res) => {
  try {
    const { days } = req.params;

    if (isNaN(days) || parseInt(days) <= 0) {
      return res.status(400).json({
        success: false,
        message: "Invalid number of days. Please provide a positive integer.",
      });
    }

    const cutoffDate = new Date(
      Date.now() - parseInt(days) * 24 * 60 * 60 * 1000
    );

    const cves = await CVE.find({
      lastModifiedDate: { $gte: cutoffDate },
    });

    res.json({ success: true, cves });
  } catch (error) {
    console.error(
      "Error fetching CVE data by last modified date:",
      error.message
    );
    res.status(500).json({ success: false, message: "Internal server error" });
  }
};
