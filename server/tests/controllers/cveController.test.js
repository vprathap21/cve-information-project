const { expect } = require('chai'); // For assertions
const sinon = require('sinon'); // For mocking

const CVE = require('../models/cveModel'); // Adjust path as needed
const cveController = require('./cveController'); // Adjust path as needed

describe('cveController functions', () => {
  // Shared variables for mocking
  let mockReq;
  let mockRes;

  beforeEach(() => {
    mockReq = { params: {} };
    mockRes = { json: sinon.spy(), status: sinon.spy() };
  });

  afterEach(() => {
    sinon.restore(); // Restore mocked functions after each test
  });

  // Test for getCveById
  describe('getCveById', () => {
    it('should return success with a valid ID', async () => {
      const mockCve = { id: 'CVE-2024-1234' };
      sinon.stub(CVE, 'findById').resolves(mockCve);

      mockReq.params.cveId = 'CVE-2024-1234';
      await cveController.getCveById(mockReq, mockRes);

      expect(mockRes.json.calledOnce).to.be.true;
      expect(mockRes.json.calledWith({ success: true, cve: mockCve })).to.be.true;
    });

    it('should return 404 for non-existent ID', async () => {
      sinon.stub(CVE, 'findById').resolves(null);

      mockReq.params.cveId = 'invalid-id';
      await cveController.getCveById(mockReq, mockRes);

      expect(mockRes.status.calledOnceWith(404)).to.be.true;
      expect(mockRes.json.calledWith({ success: false, message: 'CVE not found' })).to.be.true;
    });

    it('should handle database errors', async () => {
      const mockError = new Error('Database error');
      sinon.stub(CVE, 'findById').throws(mockError);

      mockReq.params.cveId = 'some-id';
      await cveController.getCveById(mockReq, mockRes);

      expect(mockRes.status.calledOnceWith(500)).to.be.true;
      expect(mockRes.json.calledWith({ success: false, message: 'Internal server error' })).to.be.true;
    });
  });

  // Similar tests for getCvesByYear, getCvesByScore, and getCvesModifiedInLastNDays

  // ... (Add test cases for other functions)
});

module.exports =  describe;