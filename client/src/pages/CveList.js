import React, { useState, useEffect } from "react";

import { fetchCves, fetchTotalCves } from "../utils/fetches";
import CveTable from "../components/CveTable";
import { AiOutlineCaretLeft, AiOutlineCaretRight } from "react-icons/ai";
const CveList = () => {
  const [cves, setCves] = useState([]);
  const [totalRecords, setTotalRecords] = useState(0);
  const [resultsPerPage, setResultsPerPage] = useState(10);
  const [currentPage, setCurrentPage] = useState(1);

  useEffect(() => {
    fetchCvesData();
    fetchTotalCvesData();
  }, [resultsPerPage, currentPage]);

  const fetchCvesData = async () => {
    try {
      const data = await fetchCves(currentPage, resultsPerPage);
      setCves(data.results);
    } catch (error) {
      console.error("Error fetching CVEs:", error.message);
    }
  };

  const fetchTotalCvesData = async () => {
    try {
      const data = await fetchTotalCves();
      setTotalRecords(data);
    } catch (error) {
      console.error("Error fetching total CVEs:", error.message);
    }
  };

  const handleResultsPerPageChange = (event) => {
    setResultsPerPage(parseInt(event.target.value));
    setCurrentPage(1); // Reset to the first page when results per page changes
  };

  const handlePageChange = (page) => {
    setCurrentPage(page);
  };

  return (
    <div className="w-8/12 mx-auto">
      <h1 className="text-4xl font-bold mt-20 text-center">CVE LIST</h1>
      <p className="mt-20 text-start mb-2 ml-4 font-semibold">
        Total Records: {totalRecords}
      </p>
      <div className="flex justify-center items-center ">
        <CveTable cves={cves} />
      </div>
      {/* Pagination and Results per page dropdown */}
      <div className="flex justify-between ml-4 mt-4 mb-20">
        <div className="mr-4 flex items-center">
          <label htmlFor="resultsPerPage" className="mr-2 font-semibold">
            Results Per Page:{" "}
          </label>
          <select
            id="resultsPerPage"
            className="border border-gray-200 p-1 pr-4 rounded-sm appearance-none select-arrow bg-gray-100 hover:bg-gray-200"
            onChange={handleResultsPerPageChange}
            value={resultsPerPage}
          >
            <option value="10">10</option>
            <option value="50">50</option>
            <option value="100">100</option>
          </select>
        </div>
        <div className="flex items-center mr-4 rounded-t-md">
          <button
            className="bg-gray-300 hover:bg-gray-400  font-bold py-3 px-4 rounded-l-md"
            onClick={() => handlePageChange(currentPage - 1)}
            disabled={currentPage === 1}
          >
            <AiOutlineCaretLeft />
          </button>
          {/* <span className="mx-4">Page {currentPage}</span> */}

          <div className=" flex">
            {[1, 2, 3, 4, 5].map((page) => (
              <button
                key={page}
                className={`px-4 py-2  ${
                  page === currentPage
                    ? "bg-white "
                    : "bg-gray-300 text-gray-800"
                }`}
                onClick={() => handlePageChange(page)}
                disabled={page === currentPage}
              >
                {page}
              </button>
            ))}
            <button
              className="bg-gray-300 hover:bg-gray-400  font-bold py-2 px-4 rounded-r-md"
              onClick={() => handlePageChange(currentPage + 1)}
              disabled={
                currentPage === Math.ceil(totalRecords / resultsPerPage)
              }
            >
              <AiOutlineCaretRight />
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CveList;
